pragma solidity ^0.4.19;

contract Token {

    // Total amount of tokens
    function totalSupply() constant public returns (uint256 supply) {}
    
    // The address from which the balance will be retrieved
    function balanceOf(address _owner) constant public returns (uint256 balance) {}

    // The amount of token to be transferred
    function transfer(address _to, uint256 _value) public returns (bool success) {}

    // Check if the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}

    // Enure tokens are approved for transfer
    function approve(address _spender, uint256 _value) public returns (bool success) {}

    // Token ownership
    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    
}

contract StandardToken is Token {

    function transfer(address _to, uint256 _value) public returns (bool success) {
        
        //Check total Supply for token is not over max (2^256 - 1)

        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
       
        // Allow token staking 
        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
       
        // Do not allow token staking 

        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }

    function balanceOf(address _owner) constant public returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 public totalSupply;
}

// ERC20 token definition
    
    contract ERC20Token is StandardToken {

        function () public {
        throw;
        }
// Define local varribale 

    string public name;
    uint8 public decimals;
    string public symbol;
    
// CHANGE THESE VALUES FOR YOUR TOKEN

    function ERC20Token () {
        balances[msg.sender] = 10000;               
        totalSupply = 10000;                        
        name = "Energy Data Token";                                  
        decimals = 0;                            
        symbol = "EDT";                               
    }

    // Contract approval and assignmnet for token economics

    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }
        return true;
    }  
}